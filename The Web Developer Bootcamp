The Web Developer Bootcamp

-This course is for everyone
-professional bootcamp instructor
-94% of students go to get web dev jobs
-no php
-It covers NodeJS

------------------------------------------------------

Compare Frontend and Backend Developers
	Like a restaurant, front end is where you eat, back end is the kitchen
Static and Dynamic WebPages
	Static Web Pages are pages that do not change. Dynamic Webpages are pages that updates.

HTML
	Hypertext Markup Language
	The nouns of webapge
	structure of the webpage

CSS
	The style of the webpage
	The adjective of the webpage

Javascript
	Adds logic and interactivity
	The verbs of webpage

HTML
	Structure and content of the page
	Allows to create hyperlinks

The General Rule
<tagName> Some Content </tagName>


MDN --- Mozilla Developer Network

Div tags and Span tags

DIV 
	a generic container
	groups content together block level

SPAN
	also a generic container
	groups content inline

Attributes
	Additional information tag
	key value pair
	<tag name="value"> </tag>

Form Tag
	Container where inputs are entered.
	Action -- where to send the data
	method -- what type of http request to send
	search in google is a get request
	sign up are post request. It adds data on the database.

	input tags are used to input for users.
		type attribs for inputs
			text
			date
			color
			file
			checkbox

==============================

Css Basics

CSS is the adjective of the page

General rule of css:

	selector {
		property: value;
		anotherproperty: value;
	}

Colors in hexadecimal

# _ _ _ _ _ _
first 2 -- red
Second 2 -- green
Last 2 -- blue

color: rgb(0,255,0); /*(red, green, blue) */

color: rgba(11,99,150,.2); /*(red, green, blue, transparency 0-1) */

css selectors

element selector

id selector --- #
id is used to identify individual elements
no 2 ids should be the same

class selector --- .

Specificity
	multiple styles targetting one element


Box Model
	Every element has a rectangular box in it.

	padding
		space bet content and border
	margin
		space bet elements


Jumbotron
Container
	places everything in a container
form control
	inputs bootstrapified
form group
	adds nice spacing
single class form-inline
	makes the forms inline


Nav bar


code.jquery.com




===============================================

Javascript

Evaluate JS using dev console
List the 5 JS primitives (explain and define)
define variables with var keyword
write code using console.log, alert and prompt


Primitives

5 primitive data types
work with numbers and numeric operators
work with strings and common string methods

//numbers
4
9.3
-10

//strings
"hello world"
"43"

//booleans
true
false

//null and undefined
null
undefined

//numbers
operations:
+ - * / ()
% --- this is modulo or remainder

10 % 3 ======> 1 (remaminder from 10/3)

//strings
"Hi" + " " + " Goodbye" = Hi Goodbye   ------ This is called concatenation
"hello world"
'hello world'

\ ----- escape characters
ex:
"she said \"goodbye!\"" ----- she said "goodbye!"

if you need backslash, use \\
ex:
"to see a backslash \\"
"to see a backslash \"

string have a length property, (includes space)
"hello" .length
5
"My Favorite number is 1234!" .length
27

Access individual characters using [] --start count of position with 0
"hello" [0]
"h"
"hello world" [7]
"o"
"Hello World" [6]
"W"


Activity:

100 % 3
1

("blah" + "blah") [6]
a

"hello" .length % "hi\\" .length
2




Variables and syntax
-container that has a name on it and stores data and values
-this is the pattern
var yourVariableName = yourValue;

-They can store all the values we've seen
var name = "Rusty";
var secretNumber = 73;
var isAdorable = true;

-Recall the stored vaalue by calling the variable name
var name = "Rusty";
"hello there " + name
"hello there Rusty"

var num = 37;
num + 3 + 10
70

-we can update existing variables
var name = "Robert";
name = "Bob";


camelCase
snake_case


Null and Undefined
-var that are declared but not initialized are undefined
-undefined example
var name;
var age;

-null is explicitly nothing
var currentPlayer = "Charlie";
currentPlayer = null; --gameover


Javascript methods
clear() ---clearing the console

//alert
-pops up message
alert("Hello There")
alert(52 * 2345)

//console.log
-print something in the console
console.log("HEllo console")


//prompt
-lets user input
prompt("what is your name?")

var userName = prompt("What is your name");


====
Evaluate complex logical statements
Write conditional statements w/ if, else if, else components
for loops and while loops
translate bet while and for loops


Boolean Logic
-writing statements true or false
-combine thoise statements to create complex statements

>		greater than
>=		greater than or equal to
<		less than
<=		less than or equal to
==		equal to 				------- performs type coercion (tries to be the same format)
!=		not equal to
===		equal value and type
!==		not equal value or equal type

true == "1"			//true
0 == false			//true
null == Undefined 	//true
NaN == NaN			//false  (NaN is not a number)

Logical Operators
AND, OR, NOT
&& 		AND 		true and true = true     true and false is false    false and false is false
|| 		OR 			true or true = true      true or false is true      false or false is false
! 		NOT   		!(5===9) = true


var x = 10;
var y = "a"

y === "b" || x >= 10
false || true
true

----------------------
var x = 3;
var y = 8;

!(x == "3" || x === y) && !(y != 8 && x <= y)
!(true || false) && !(false && true)
!(true) && !(false)
false && true
false




-----------------------
var str = ""
var msg = "haha!"
var isFunny = "false"

!(( str || msg) && isFunny)
!((false || true) && true)
!(true && true)
!(true)
false



JS Conditionals
-making decisions with code

if
else if
else