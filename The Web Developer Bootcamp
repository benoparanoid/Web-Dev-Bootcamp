The Web Developer Bootcamp

-This course is for everyone
-professional bootcamp instructor
-94% of students go to get web dev jobs
-no php
-It covers NodeJS

------------------------------------------------------

Compare Frontend and Backend Developers
	Like a restaurant, front end is where you eat, back end is the kitchen
Static and Dynamic WebPages
	Static Web Pages are pages that do not change. Dynamic Webpages are pages that updates.

HTML
	Hypertext Markup Language
	The nouns of webapge
	structure of the webpage

CSS
	The style of the webpage
	The adjective of the webpage

Javascript
	Adds logic and interactivity
	The verbs of webpage

HTML
	Structure and content of the page
	Allows to create hyperlinks

The General Rule
<tagName> Some Content </tagName>


MDN --- Mozilla Developer Network

Div tags and Span tags

DIV 
	a generic container
	groups content together block level

SPAN
	also a generic container
	groups content inline

Attributes
	Additional information tag
	key value pair
	<tag name="value"> </tag>

Form Tag
	Container where inputs are entered.
	Action -- where to send the data
	method -- what type of http request to send
	search in google is a get request
	sign up are post request. It adds data on the database.

	input tags are used to input for users.
		type attribs for inputs
			text
			date
			color
			file
			checkbox

==============================

Css Basics

CSS is the adjective of the page

General rule of css:

	selector {
		property: value;
		anotherproperty: value;
	}

Colors in hexadecimal

# _ _ _ _ _ _
first 2 -- red
Second 2 -- green
Last 2 -- blue

color: rgb(0,255,0); /*(red, green, blue) */

color: rgba(11,99,150,.2); /*(red, green, blue, transparency 0-1) */

css selectors

element selector

id selector --- #
id is used to identify individual elements
no 2 ids should be the same

class selector --- .

Specificity
	multiple styles targetting one element


Box Model
	Every element has a rectangular box in it.

	padding
		space bet content and border
	margin
		space bet elements


Jumbotron
Container
	places everything in a container
form control
	inputs bootstrapified
form group
	adds nice spacing
single class form-inline
	makes the forms inline


Nav bar


code.jquery.com




===============================================

Javascript

Evaluate JS using dev console
List the 5 JS primitives (explain and define)
define variables with var keyword
write code using console.log, alert and prompt


Primitives

5 primitive data types
work with numbers and numeric operators
work with strings and common string methods

//numbers
4
9.3
-10

//strings
"hello world"
"43"

//booleans
true
false

//null and undefined
null
undefined

//numbers
operations:
+ - * / ()
% --- this is modulo or remainder

10 % 3 ======> 1 (remaminder from 10/3)

//strings
"Hi" + " " + " Goodbye" = Hi Goodbye   ------ This is called concatenation
"hello world"
'hello world'

\ ----- escape characters
ex:
"she said \"goodbye!\"" ----- she said "goodbye!"

if you need backslash, use \\
ex:
"to see a backslash \\"
"to see a backslash \"

string have a length property, (includes space)
"hello" .length
5
"My Favorite number is 1234!" .length
27

Access individual characters using [] --start count of position with 0
"hello" [0]
"h"
"hello world" [7]
"o"
"Hello World" [6]
"W"


Activity:

100 % 3
1

("blah" + "blah") [6]
a

"hello" .length % "hi\\" .length
2




Variables and syntax
-container that has a name on it and stores data and values
-this is the pattern
var yourVariableName = yourValue;

-They can store all the values we've seen
var name = "Rusty";
var secretNumber = 73;
var isAdorable = true;

-Recall the stored vaalue by calling the variable name
var name = "Rusty";
"hello there " + name
"hello there Rusty"

var num = 37;
num + 3 + 10
70

-we can update existing variables
var name = "Robert";
name = "Bob";


camelCase
snake_case


Null and Undefined
-var that are declared but not initialized are undefined
-undefined example
var name;
var age;

-null is explicitly nothing
var currentPlayer = "Charlie";
currentPlayer = null; --gameover


Javascript methods
clear() ---clearing the console

//alert
-pops up message
alert("Hello There")
alert(52 * 2345)

//console.log
-print something in the console
console.log("HEllo console")


//prompt
-lets user input
prompt("what is your name?")

var userName = prompt("What is your name");


====
Evaluate complex logical statements
Write conditional statements w/ if, else if, else components
for loops and while loops
translate bet while and for loops


Boolean Logic
-writing statements true or false
-combine thoise statements to create complex statements

>		greater than
>=		greater than or equal to
<		less than
<=		less than or equal to
==		equal to 				------- performs type coercion (tries to be the same format)
!=		not equal to
===		equal value and type
!==		not equal value or equal type

true == "1"			//true
0 == false			//true
null == Undefined 	//true
NaN == NaN			//false  (NaN is not a number)

Logical Operators
AND, OR, NOT
&& 		AND 		true and true = true     true and false is false    false and false is false
|| 		OR 			true or true = true      true or false is true      false or false is false
! 		NOT   		!(5===9) = true


var x = 10;
var y = "a"

y === "b" || x >= 10
false || true
true

----------------------
var x = 3;
var y = 8;

!(x == "3" || x === y) && !(y != 8 && x <= y)
!(true || false) && !(false && true)
!(true) && !(false)
false && true
false




-----------------------
var str = ""
var msg = "haha!"
var isFunny = "false"

!(( str || msg) && isFunny)
!((false || true) && true)
!(true && true)
!(true)
false



JS Conditionals
-making decisions with code

if
else if
else



================
Understand and purpose loops
Define DRY code
Write simple while loops

DRY code --- Dont Repeat Yourself
Loops gets us to write DRY codes


While Loops
-repeat code WHILE a condition is true



-------------------------
var count = Number(1);

while(count < 11) {
	console.log("Count is: " + count);
	count++;      ----- can also be count+=2; for 2 increments
}
Count is: 1
Count is: 2
Count is: 3
Count is: 4
Count is: 5
Count is: 6
Count is: 7
Count is: 8
Count is: 9
Count is: 10



-----------------------
var str = "hello";
var count = 0;


while (count < str.length) {
	console.log(str[count]);
	count++;
}
h
e
l
l
o



Infinite loops occur when the terminating condition in a loop is never false

var num = 1;

while(num <= 10) {
	console.log(num);
	num += 2;
}
1
3
5
7
9


var num = 1;

while(num <= 20) {
	if(num % 4 === 0) {
		console.log(num);
	}
	num++;
}

4
8
12
16
20


var num = 100;

while(num < 150) {
	console.log(num + 1);
	num--;
}
----- This is an infinite loop



--------------------
For Loops
understand for loops vs while loops
write valid for loops

for(init; condition; step) {
	run the codes;
}


print no. 1-5 with for loop
---var only exist inside the for loop
for (var count = 1; count < 6; count++) {
	console.log(count);
}


print each character in a string with for loop
var str = "hello"
for (var i = 0; i < str.length; i++) {
	console.log(str[i]);
}

---------------------------------
for(var i = 0; i < 16; i+=8) {
	console.log(i);
}
0
8

----------------------------------
var str = "ahceclwlxo";

for(var i = 1; i < str.length; i+=2){
	console.log(str[i]);
}
h
e
l
l
o



==================================================

Write function declarations and function expressions
Explain diff bet console.log and return
Define functions that take multiple arguments


JS Functions
-understand why we use functions
-def function w/o arguments
-w arguments
-return value from func

Functions
-reusable bits of code


1. Declare a function first:

function doSomething() {
	console.log("Hello World");
}

2. Then Call it: ----if w/o (), it will just call the function, not execute

doSomething();
doSomething();
doSomething();
doSomething();


---------------

Arguments
-write functions that take inputs

function square(num){
	console.log(num * num);
}

square(2) ------ 4


function area(length, width){
	console.log(length * width);
}

area(9,2); -------- 18


--------------------
Return Keyword
-often we want a function to send back an output value
-when a return is executed, all the codes after the return w/in the argument is not executed

function square(x) {
    return x * x;			------- only 1 return per argument unless within other arguments
}


"4 squared is: " + square(4)
"4 squared is: 16"



Capitalize!

function capitalize(str) {
	return str.charAt(0).toUpperCase() + str.slice(1);
}

var city = "paris";		----------- "paris"
var capital = capitalize(city) ------- "Paris"




function declaration vs function expression

function declaration
function capitalize(str) {
	return str.charAt(0).toUpperCase() + str.slice(1);
}


function expression
var capitalize = function(str) {
	return str.charAt(0).toUpperCase() + str.slice(1);
}



----------------------
function test(x,y) {
	return y - x;
}

test(10, 40); ------------ 30



function test(x) {
	return x*2;
	console.log(x);
	return x/2;
}

test(40); ----------------- 80



===================================================
Scope
-context that code is executed in

Higher order Functions
-passing functions to other functions

---------------
function sing(){
    console.log("twinkle twinkle...");
    console.log("how i wonder");
}
undefined
sing()
twinkle twinkle...
how i wonder

setInterval(sing, 1000);
27

VM260:2 twinkle twinkle...
VM260:3 how i wonder
VM260:2 twinkle twinkle...
VM260:3 how i wonder

clearInterval(27)			------ end Interval



----------------
setInterval(function(){
    console.log("I am an anonymous function");
    console.log("This is awesome!");
}, 2000);
32
VM468:2 I am an anonymous function
VM468:3 This is awesome!
VM468:2 I am an anonymous function
VM468:3 This is awesome!
VM468:2 I am an anonymous function
VM468:3 This is awesome!
VM468:2 I am an anonymous function
VM468:3 This is awesome!
VM468:2 I am an anonymous function
VM468:3 This is awesome!
VM468:2 I am an anonymous function
VM468:3 This is awesome!

clearInterval(32)



=========================================
array
-store values and any type of data


define arrays(using codes)
use builtin array methods to add and remove


Array!
var friend1 = "Charlie";
var friend2 = "Liz";
var friend3 = "David";
var friend4 = "Mattias";

--------

var friends = ["Charlie", "Liz", "David", "Mattias"];
					0		1		2			3				----- array are indexed starting 0.


console.log(friends[0])					----This calls "Charlie"
friends[1] + " <3 " + friends[2]		---- This calls "Liz <3 David"



---------------
Update array
var friends = ["Charlie", "Liz", "David", "Mattias"];

friends[0] = "Chuck";
friends[1] = "Lizzie";					---------Chuck, Lizzie, David, Mattias

friends[4] = "Amelie";					---------Chuck, Lizzie, David, Mattias, Amelie


friends[10] = "Beno"                    --------- Chuck, Lizzie, David, Mattias, Amelie, undefine x 5, Beno



-------------------
var friends = [];				-----Adding array
var friends = new Array();		-----Adding Array

var random_collection = [49, true, "hermione", null];		----array holds any type

var nums = [45,37,89,24];
nums.length    //4				


=============================

Arrays methods:

push/pop
shift/unshift
indexOf
slice

------------------------
push/pop
Push -adding something to the very end of the array


var colors = ["red", "orange","yellow"];

colors.push("green");
colors ---------- red, orange, yellow, green


Pop-removes the last element in an array

colors.pop ------- green
colors ---------------- red, orange, yellow

var col = colors.pop();   ------------------ yellow


------------------------
Shift/Unshift
-Add and remove from the beginning of the array

Unshift
- adding 
var colors = ["red", "orange","yellow"]		----------red, orange, yellow,
colors.unshift("infrared")					----------infrared, red, orange, yellow

colors.shift("orange")						-----------infrared, red, yellow

var col = colors.shift();					-----------infrared



------------------------
indexOf

var colors = ["red", "orange","yellow","orange"]
colors.indexOf("orange")			-------1 ----returns the first index matched
colors.indexOf("yellow")			-------2
colors.indexOf("grey")				------- (-1) this is the value if not present



-------------------------
slice
-copy different portions of the array

var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(1,3)				--------- Orange, Lemon
						 (cut begins, slice should stop but not included)


var otherNums = fruits.slice();			-----------copies whole array


Arrays exercise
-------------------------------------
var numbers = [22,67, 33, 96, 88];

console.log(numbers[numbers.length])	------ undefined


-------------------------------------
Nested Array


var friendGroups = [
	["Harry", "Ron", "Hermione"],
	["Malfoy", "Crabbe", "Goyle"].
	["Mooney", "Wormtail", "Prongs"]
];

console.log(friendGroups[2][0]);			------- Mooney (friendGroups[array][inside the array])


============================================
Array Iteration
Use for loop to iterate over an array
use forEach to iterate over an array
Compare and contrast for loops and forEach

-----------------
for loop
-to loop over an array using for loop, use the length property


var colors = ["red", "orange", "yellow", "green"];

for(var i = 0; i < colors.length; i++) {
	console.log(colors[i]);
}


-----------------
forEach
-easy way of iterating array

arr.forEach(someFunction)

var colors = ["red", "orange", "yellow", "green"];

colors.forEach(
	function() {
    	console.log("Inside the forEach ")
    }
);
4x Inside the forEach 


colors.forEach(
	function(iLoveDogs){
		console.log("INSIDE THE FOREACH " + iLoveDogs);
	}
);
INSIDE THE FOREACH red
INSIDE THE FOREACH orange
INSIDE THE FOREACH yellow
INSIDE THE FOREACH green



-----------------------
var numbers = [1,2,3,4,5,6,7,8,9,10];
var colors = ["red", "orange", "yellow", "green"];

numbers.forEach(function(color) {
	if(color% 3 === 0){
	console.log(color);
	}
});

3
6
9



-----------------------


var todo.splice(index, how many) ======== deleting something from array



=======================
Objects
- unlike arrays, objects have no order

example:

var person = {
	name: "Cindy",
	age: 32,
	city: "Missoula"
}

--- to display object properties
console.log(person["name"]);
console.log(person.name)    ----- this cannot be used if starts with number

--- to update objects
person["age"] += 1;
person.city = "London";

-----------------
Creating objects

var person = {}
person.name = "Travis";
person.age = 21;
person.city = "LA";

or

var person = {
	name: "Beno"
	age: 27
	city: "Manila"
};

or

var person = new Object();
person.name = "Travis";
person.age = 21;
person.city = "LA";

-----------------
Objects can hold all sorts of data

var junkObject = {
	age: 57,
	color: "purple",
	isHungry: true,
	friends: ["Horatio", "Hamlet"],
	pet: {
		name: "Rusty",
		species: "Dog",
		age: 2
	}
}
